{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nexport var useScreenDimensions = function useScreenDimensions() {\n  var _useState = useState(Dimensions.get(\"screen\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      screen = _useState2[0],\n      setScreen = _useState2[1];\n\n  useEffect(function () {\n    var onChange = function onChange(result) {\n      setScreen(result.screen);\n    };\n\n    Dimensions.addEventListener(\"change\", onChange);\n    return function () {\n      return Dimensions.removeEventListener(\"change\", onChange);\n    };\n  });\n  return _objectSpread({}, screen);\n};\nexport var useWindowDimensions = function useWindowDimensions() {\n  var _useState3 = useState(Dimensions.get(\"window\")),\n      _useState4 = _slicedToArray(_useState3, 2),\n      window = _useState4[0],\n      setWindow = _useState4[1];\n\n  useEffect(function () {\n    var onChange = function onChange(result) {\n      setWindow(result.window);\n    };\n\n    Dimensions.addEventListener(\"change\", onChange);\n    return function () {\n      return Dimensions.removeEventListener(\"change\", onChange);\n    };\n  });\n  return _objectSpread({}, window);\n};\n\nvar useDimensions = function useDimensions() {\n  var _useState5 = useState(Dimensions.get(\"screen\")),\n      _useState6 = _slicedToArray(_useState5, 2),\n      screen = _useState6[0],\n      setScreen = _useState6[1];\n\n  var _useState7 = useState(Dimensions.get(\"window\")),\n      _useState8 = _slicedToArray(_useState7, 2),\n      window = _useState8[0],\n      setWindow = _useState8[1];\n\n  useEffect(function () {\n    var onChange = function onChange(result) {\n      setScreen(result.screen);\n      setWindow(result.window);\n    };\n\n    Dimensions.addEventListener(\"change\", onChange);\n    return function () {\n      return Dimensions.removeEventListener(\"change\", onChange);\n    };\n  });\n  return {\n    screen: screen,\n    window: window\n  };\n};\n\nexport default useDimensions;","map":{"version":3,"sources":["/home/ccheever/projects/clubhouse-expo/clubhouse/node_modules/react-native-use-dimensions/dist/index.js"],"names":["useState","useEffect","useScreenDimensions","Dimensions","get","screen","setScreen","onChange","result","addEventListener","removeEventListener","useWindowDimensions","window","setWindow","useDimensions"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAWA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA,kBACTF,QAAQ,CAACG,UAAU,CAACC,GAAX,CAAe,QAAf,CAAD,CADC;AAAA;AAAA,MAC9BC,MAD8B;AAAA,MACtBC,SADsB;;AAErCL,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAY;AACzBF,MAAAA,SAAS,CAACE,MAAM,CAACH,MAAR,CAAT;AACH,KAFD;;AAGAF,IAAAA,UAAU,CAACM,gBAAX,CAA4B,QAA5B,EAAsCF,QAAtC;AACA,WAAO;AAAA,aAAMJ,UAAU,CAACO,mBAAX,CAA+B,QAA/B,EAAyCH,QAAzC,CAAN;AAAA,KAAP;AACH,GANQ,CAAT;AAOA,2BACOF,MADP;AAGH,CAZM;AAwBP,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA,mBACTX,QAAQ,CAACG,UAAU,CAACC,GAAX,CAAe,QAAf,CAAD,CADC;AAAA;AAAA,MAC9BQ,MAD8B;AAAA,MACtBC,SADsB;;AAErCZ,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAY;AACzBK,MAAAA,SAAS,CAACL,MAAM,CAACI,MAAR,CAAT;AACH,KAFD;;AAGAT,IAAAA,UAAU,CAACM,gBAAX,CAA4B,QAA5B,EAAsCF,QAAtC;AACA,WAAO;AAAA,aAAMJ,UAAU,CAACO,mBAAX,CAA+B,QAA/B,EAAyCH,QAAzC,CAAN;AAAA,KAAP;AACH,GANQ,CAAT;AAOA,2BACOK,MADP;AAGH,CAZM;;AAsBP,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,mBACId,QAAQ,CAACG,UAAU,CAACC,GAAX,CAAe,QAAf,CAAD,CADZ;AAAA;AAAA,MACjBC,MADiB;AAAA,MACTC,SADS;;AAAA,mBAEIN,QAAQ,CAACG,UAAU,CAACC,GAAX,CAAe,QAAf,CAAD,CAFZ;AAAA;AAAA,MAEjBQ,MAFiB;AAAA,MAETC,SAFS;;AAGxBZ,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAY;AACzBF,MAAAA,SAAS,CAACE,MAAM,CAACH,MAAR,CAAT;AACAQ,MAAAA,SAAS,CAACL,MAAM,CAACI,MAAR,CAAT;AACH,KAHD;;AAIAT,IAAAA,UAAU,CAACM,gBAAX,CAA4B,QAA5B,EAAsCF,QAAtC;AACA,WAAO;AAAA,aAAMJ,UAAU,CAACO,mBAAX,CAA+B,QAA/B,EAAyCH,QAAzC,CAAN;AAAA,KAAP;AACH,GAPQ,CAAT;AAQA,SAAO;AACHF,IAAAA,MAAM,EAANA,MADG;AAEHO,IAAAA,MAAM,EAANA;AAFG,GAAP;AAIH,CAfD;;AAgBA,eAAeE,aAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Dimensions } from \"react-native\";\r\n/**\r\n * Use this hook to access the screen dimensions _only_.\r\n *\r\n * ```js\r\n * const { height, width, fontScale, scale } = useScreenDimensions();\r\n * ```\r\n *\r\n * @returns Object containing screen dimensions\r\n */\r\nexport const useScreenDimensions = () => {\r\n    const [screen, setScreen] = useState(Dimensions.get(\"screen\"));\r\n    useEffect(() => {\r\n        const onChange = (result) => {\r\n            setScreen(result.screen);\r\n        };\r\n        Dimensions.addEventListener(\"change\", onChange);\r\n        return () => Dimensions.removeEventListener(\"change\", onChange);\r\n    });\r\n    return {\r\n        ...screen\r\n    };\r\n};\r\n/**\r\n * Use this hook to access the window dimensions _only_.\r\n *\r\n * This can be useful on Android devices, where the [window has different dimensions than the screen](https://stackoverflow.com/a/44979327/11960129).\r\n *\r\n * ```js\r\n * const { height, width, fontScale, scale } = useWindowDimensions();\r\n * ```\r\n *\r\n * @returns Object containing window dimensions\r\n */\r\nexport const useWindowDimensions = () => {\r\n    const [window, setWindow] = useState(Dimensions.get(\"window\"));\r\n    useEffect(() => {\r\n        const onChange = (result) => {\r\n            setWindow(result.window);\r\n        };\r\n        Dimensions.addEventListener(\"change\", onChange);\r\n        return () => Dimensions.removeEventListener(\"change\", onChange);\r\n    });\r\n    return {\r\n        ...window\r\n    };\r\n};\r\n/**\r\n * Use this hook to access _both the screen and window dimensions_.\r\n *\r\n * ```js\r\n * const { screen, window } = useScreenDimensions();\r\n * ```\r\n *\r\n * @returns Object containing both screen and window dimensions.\r\n */\r\nconst useDimensions = () => {\r\n    const [screen, setScreen] = useState(Dimensions.get(\"screen\"));\r\n    const [window, setWindow] = useState(Dimensions.get(\"window\"));\r\n    useEffect(() => {\r\n        const onChange = (result) => {\r\n            setScreen(result.screen);\r\n            setWindow(result.window);\r\n        };\r\n        Dimensions.addEventListener(\"change\", onChange);\r\n        return () => Dimensions.removeEventListener(\"change\", onChange);\r\n    });\r\n    return {\r\n        screen,\r\n        window\r\n    };\r\n};\r\nexport default useDimensions;\r\n"]},"metadata":{},"sourceType":"module"}